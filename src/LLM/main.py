from enum import Enum

from openai import OpenAI
from opentelemetry.trace import Status, StatusCode

from src.config.envs import settings
from src.monitoring.tracing import tracer

client_nvidia = OpenAI(
  base_url = settings.NVIDIA_URL,
  api_key = settings.NVIDIA_API_KEY,
)

def chat(system="", user="", model="openai/gpt-oss-120b"):
     with tracer.start_as_current_span("llm.chat") as span:
        try:
            span.set_attribute("llm.model", model)
            span.set_attribute("input.user_preview", user[:200])

            response = client_nvidia.chat.completions.create(
                messages=[
                {
                    "role": "system",
                    "content": system
                },
                {
                    "role": "user",
                    "content": user
                }
                ],
                model=model,
                temperature= 1,
                max_tokens= 2500,
                #extra_body={"chat_template_kwargs": {"thinking":False}},
            )
            
            choice = response.choices[0]
            usage = response.usage

            content = choice.message.content
            if content is None:
                reason = choice.finish_reason or "unknown"
                span.set_status(Status(StatusCode.ERROR, f"No content returned (reason={reason})"))
                span.set_attribute("llm.no_content_reason", reason)
                span.set_attribute("llm.response_id", response.id)
                return "[No response generated by the model]"

            if usage:
                span.set_attribute("llm.prompt_tokens", usage.prompt_tokens)
                span.set_attribute("llm.completion_tokens", usage.completion_tokens)
                span.set_attribute("llm.total_tokens", usage.total_tokens)

            span.set_attribute("llm.finish_reason", choice.finish_reason)
            span.set_attribute("llm.output_preview", content[:200])
            span.set_status(Status(StatusCode.OK))

            return content
            
        except Exception as e:
            span.record_exception(e)
            span.set_status(Status(StatusCode.ERROR))
            raise


class Models(Enum):
	gpt_20b = 'openai/gpt-oss-20b'
	kimi_k2 = 'moonshotai/kimi-k2-instruct'
	llama4_scout = 'meta/llama-4-scout-17b-16e-instruct'
